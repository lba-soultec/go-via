name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CI_COMMIT_TAG=${{ github.sha }}

  build-go-cli:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Build CLI binaries
        run: |
          cd ilomapi/cli
          go mod tidy
          mkdir -p binaries
          env GOOS=darwin GOARCH=arm64 go build -o binaries/redfish-cli.darwin
          env GOOS=linux GOARCH=amd64 go build -o binaries/redfish-cli
          env GOOS=windows GOARCH=amd64 go build -o binaries/redfish-cli.exe
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-binaries
          path: ilomapi/cli/binaries/
          retention-days: 365

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-go-cli]
    steps:
      - uses: actions/checkout@v4
      
      - name: Download CLI artifacts
        uses: actions/download-artifact@v4
        with:
          name: cli-binaries
          path: ilomapi/cli/binaries/
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ilomapi/cli/binaries/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    runs-on: [self-hosted, stdeployment-shell]
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build-docker]
    steps:
      - name: Deploy to staging lab
        run: |
          export CI_COMMIT_TAG=${{ github.ref_name }}
          export IMAGE_PATH=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${CI_COMMIT_TAG}
          
          # Login to GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          
          # Wait for the image to be available
          until docker pull $IMAGE_PATH; do 
            echo "Waiting for image to be available..."
            sleep 60
          done
          
          VERSION=${CI_COMMIT_TAG} envsubst < /srv/stag/govia/docker/docker-compose.tmpl > /srv/stag/govia/docker/docker-compose.yaml
          sudo docker-compose -f /srv/stag/govia/docker/docker-compose.yaml up -d

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  code-quality:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: Install statik
        run: go install github.com/rakyll/statik@latest
      
      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest
      
      - name: Download Go dependencies
        run: go mod download
      
      - name: Verify Go dependencies
        run: go mod verify
      
      - name: build npm module
        run: |
          cd web
          npm install --legacy-peer-deps
          npm run build
          cd ..
        
      - name: Generate statik files
        run: |
          rm -rf statik
          statik -src ./web/dist/web -f
      
      - name: Build Go project
        run: go build ./...
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.3.1
          install-mode: goinstall

